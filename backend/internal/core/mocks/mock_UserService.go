// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"GoNext/base/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockUserService
func (_mock *MockUserService) Delete(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id
func (_e *MockUserService_Expecter) Delete(id interface{}) *MockUserService_Delete_Call {
	return &MockUserService_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockUserService_Delete_Call) Run(run func(id string)) *MockUserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_Delete_Call) Return(err error) *MockUserService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_Delete_Call) RunAndReturn(run func(id string) error) *MockUserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserService
func (_mock *MockUserService) GetByEmail(email string) (*domain.User, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserService_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email
func (_e *MockUserService_Expecter) GetByEmail(email interface{}) *MockUserService_GetByEmail_Call {
	return &MockUserService_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *MockUserService_GetByEmail_Call) Run(run func(email string)) *MockUserService_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_GetByEmail_Call) Return(user *domain.User, err error) *MockUserService_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetByEmail_Call) RunAndReturn(run func(email string) (*domain.User, error)) *MockUserService_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockUserService
func (_mock *MockUserService) GetById(id string) (*domain.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockUserService_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id
func (_e *MockUserService_Expecter) GetById(id interface{}) *MockUserService_GetById_Call {
	return &MockUserService_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *MockUserService_GetById_Call) Run(run func(id string)) *MockUserService_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_GetById_Call) Return(user *domain.User, err error) *MockUserService_GetById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetById_Call) RunAndReturn(run func(id string) (*domain.User, error)) *MockUserService_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockUserService
func (_mock *MockUserService) Register(user domain.User) (*domain.User, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.User) (*domain.User, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.User) *domain.User); ok {
		r0 = returnFunc(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - user
func (_e *MockUserService_Expecter) Register(user interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", user)}
}

func (_c *MockUserService_Register_Call) Run(run func(user domain.User)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.User))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(user1 *domain.User, err error) *MockUserService_Register_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(user domain.User) (*domain.User, error)) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUserService
func (_mock *MockUserService) Update(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - user
func (_e *MockUserService_Expecter) Update(user interface{}) *MockUserService_Update_Call {
	return &MockUserService_Update_Call{Call: _e.mock.On("Update", user)}
}

func (_c *MockUserService_Update_Call) Run(run func(user *domain.User)) *MockUserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User))
	})
	return _c
}

func (_c *MockUserService_Update_Call) Return(err error) *MockUserService_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_Update_Call) RunAndReturn(run func(user *domain.User) error) *MockUserService_Update_Call {
	_c.Call.Return(run)
	return _c
}
