// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Authenticate(username string, password string) (string, error) {
	ret := _mock.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthService_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - username
//   - password
func (_e *MockAuthService_Expecter) Authenticate(username interface{}, password interface{}) *MockAuthService_Authenticate_Call {
	return &MockAuthService_Authenticate_Call{Call: _e.mock.On("Authenticate", username, password)}
}

func (_c *MockAuthService_Authenticate_Call) Run(run func(username string, password string)) *MockAuthService_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_Authenticate_Call) Return(s string, err error) *MockAuthService_Authenticate_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthService_Authenticate_Call) RunAndReturn(run func(username string, password string) (string, error)) *MockAuthService_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockAuthService
func (_mock *MockAuthService) ValidateToken(tokenString string) (string, error) {
	ret := _mock.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(tokenString)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(tokenString)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(tokenString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAuthService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - tokenString
func (_e *MockAuthService_Expecter) ValidateToken(tokenString interface{}) *MockAuthService_ValidateToken_Call {
	return &MockAuthService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", tokenString)}
}

func (_c *MockAuthService_ValidateToken_Call) Run(run func(tokenString string)) *MockAuthService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_ValidateToken_Call) Return(s string, err error) *MockAuthService_ValidateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthService_ValidateToken_Call) RunAndReturn(run func(tokenString string) (string, error)) *MockAuthService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
